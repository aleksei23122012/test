import os
import asyncio
import traceback
import psycopg2 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è Postgres
from flask import Flask, request
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Bot, error

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def save_user_sync_postgres(postgres_url, user_id: int, username: str):
    """–°–ò–ù–•–†–û–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Vercel Postgres."""
    try:
        # ON CONFLICT (chat_id) DO UPDATE... - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ "upsert" –¥–ª—è Postgres
        sql = """
        INSERT INTO users (chat_id, username)
        VALUES (%s, %s)
        ON CONFLICT (chat_id) DO UPDATE SET
        username = EXCLUDED.username;
        """
        conn = psycopg2.connect(postgres_url)
        cur = conn.cursor()
        cur.execute(sql, (user_id, username))
        conn.commit()
        cur.close()
        conn.close()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Vercel Postgres.")
    except Exception as e:
        print(f"--- !!! –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Postgres: {e} !!! ---")
        print(traceback.format_exc())

def get_all_user_ids(postgres_url):
    """–°–ò–ù–•–†–û–ù–ù–û –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö chat_id –∏–∑ –±–∞–∑—ã."""
    user_ids = []
    try:
        conn = psycopg2.connect(postgres_url)
        cur = conn.cursor()
        cur.execute("SELECT chat_id FROM users;")
        # fetchall() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä [(123,), (456,)]
        # –ú—ã –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–∏—Ö —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–∞–º–∏ ID)
        user_ids = [item[0] for item in cur.fetchall()]
        cur.close()
        conn.close()
    except Exception as e:
        print(f"--- !!! –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ ID –∏–∑ Postgres: {e} !!! ---")
    return user_ids
    
def remove_user_sync_postgres(postgres_url, user_id: int):
    """–°–ò–ù–•–†–û–ù–ù–û —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)."""
    try:
        conn = psycopg2.connect(postgres_url)
        cur = conn.cursor()
        cur.execute("DELETE FROM users WHERE chat_id = %s;", (user_id,))
        conn.commit()
        cur.close()
        conn.close()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
    except Exception as e:
        print(f"--- !!! –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ Postgres: {e} !!! ---")

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def handle_start_async(bot, postgres_url, update: Update):
    user = update.message.from_user
    user_id = user.id
    username = user.username if user.username else ""
    
    save_user_sync_postgres(postgres_url, user_id, username)
    
    keyboard = [
        [KeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", web_app=WebAppInfo(url="https://aleksei23122012.teamly.ru/space/00647e86-cd4b-46ef-9903-0af63964ad43/article/17e16e2a-92ff-463c-8bf4-eaaf202c0bc7"))],
        [KeyboardButton("–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", web_app=WebAppInfo(url="https://baza-znaniy-app.vercel.app/"))],
        [KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", web_app=WebAppInfo(url="https://docs.google.com/forms/d/e/1FAIpQLSedAPNqKkoJxer4lISLVsQgmu6QpPagoWreyvYOz7DbFuanFw/viewform?usp=header"))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **–î–∞—à–±–æ—Ä–¥** —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞.\n\n"
        "–ê —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
async def handle_admin_command_async(bot, postgres_url, update: Update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    text_parts = update.message.text.split(' ', 1)
    command = text_parts[0]
    admin_id = update.message.chat_id

    if command == '/stats':
        try:
            conn = psycopg2.connect(postgres_url)
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM users;")
            count = cur.fetchone()[0]
            cur.close()
            conn.close()
            await update.message.reply_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {count}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # --- –ù–û–í–´–ô –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –ë–õ–û–ö –î–õ–Ø /broadcast ---
    elif command == '/broadcast' and len(text_parts) > 1:
        message_to_send = text_parts[1]
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

        user_ids = get_all_user_ids(postgres_url)
        
        success_count = 0
        for user_id in user_ids:
            try:
                await bot.send_message(chat_id=user_id, text=message_to_send, parse_mode='Markdown')
                success_count += 1
                await asyncio.sleep(0.05) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except error.Forbidden:
                remove_user_sync_postgres(postgres_url, user_id)
            except error.TelegramError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
        
        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(user_ids)}.")

    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n`/broadcast <—Ç–µ–∫—Å—Ç>`\n`/stats`",
            parse_mode='Markdown'
        )


# === –ì–õ–ê–í–ù–´–ô –í–ï–ë–•–£–ö ===
@app.route('/', methods=['POST'])
def webhook():
    try:
        BOT_TOKEN = os.environ['BOT_TOKEN']
        POSTGRES_URL = os.environ['POSTGRES_URL']
        ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')
        ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]

        bot = Bot(token=BOT_TOKEN)
        update_data = request.get_json()
        update = Update.de_json(update_data, bot)
        
        if update.message and update.message.text:
            text = update.message.text
            user_id = update.message.chat_id

            if text == '/start':
                asyncio.run(handle_start_async(bot, POSTGRES_URL, update))
            elif text.startswith('/') and user_id in ADMIN_IDS:
                asyncio.run(handle_admin_command_async(bot, POSTGRES_URL, update))

    except Exception as e:
        print(f"--- !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –í–ï–ë–•–£–ö–ï !!! ---")
        print(traceback.format_exc())
                
    return 'ok', 200
